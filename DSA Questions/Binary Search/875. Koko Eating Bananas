//Brute Force
//TC - O(n)
//Time Limit Exceed
class Solution {
    public int findmax(int[] piles){
        int max = Integer.MIN_VALUE;
        int n = piles.length;
        for(int i = 0; i < n; i++) {
            max = Math.max(max, piles[i]);
        }
        return max;
    }
    public int countTotalHours(int[] piles, int k) {
        int TotalH = 0;
        int n = piles.length;
        for(int i = 0; i < n; i++) {
            TotalH += Math.ceil((double) piles[i] / (double) k);
        }
        return TotalH;
    }
    public int minEatingSpeed(int[] piles, int h) {
        int max = findmax(piles);
        for(int i = 1; i <= max; i++) {
            int totalHours = countTotalHours(piles,i);
            if(totalHours <= h){
                return i;
            }
        }
        return -1;
    }
}

//Optimised Solution
//TC- O(logn)
class Solution {
    public int findmax(int[] piles){
        int max = Integer.MIN_VALUE;
        int n = piles.length;
        for(int i = 0; i < n; i++) {
            max = Math.max(max, piles[i]);
        }
        return max;
    }
    public int countTotalHours(int[] piles, int k) {
        int TotalH = 0;
        int n = piles.length;
        for(int i = 0; i < n; i++) {
            TotalH += Math.ceil((double) piles[i] / (double) k);
        }
        return TotalH;
    }
    public int minEatingSpeed(int[] piles, int h) {
        int max = findmax(piles);
        int low = 1;
        int high = max;
        int ans = 1;
        while(low <= high) {
            int mid = (low + high) / 2;
            int totalHours = countTotalHours(piles,mid);
            if(totalHours > h) {
                low = mid + 1;
            } else {
                ans = mid;
                high = mid - 1;
            }
        }
        return ans;
    }
}
