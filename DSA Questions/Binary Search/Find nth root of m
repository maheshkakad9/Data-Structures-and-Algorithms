//Brute Force
//TC- ~O(n)
{
    public int nthRoot(int n, int m) {
        for(int i = 1; i <= m; i++) {
            int result = (int) Math.pow(i,n);
            if(result == m) {
                return i;
            } else if (result > m) {
                break;
            }
        }
        return -1;
    }
}

//Optimised Solution
//TC- O(logn)

//The TC of Math.pow is O(logn) as it is a exponential function
//Hence total TC is O(logn) * O(logn) = O(logn)

class Solution {
    public int nthRoot(int n, int m) {
        int low = 1;
        int high = m;
        while(low <= high) {
            int mid = (low + high) / 2;
            int result = (int) Math.pow(mid,n);
            if(result == m) {
                return mid;
            } else if( result > m) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return -1;
    }
}
