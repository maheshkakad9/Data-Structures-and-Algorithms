//Brute Force
//TC - O(n)
class Solution {
    public int findPeakElement(int[] nums) {
        int n = nums.length;
        int peak = Integer.MIN_VALUE;
        int index = -1;
        for(int i = 0; i < n; i++) {
            if(nums[i] >= peak) {
                peak = nums[i];
                index = i;
            }
        }
        return index;
    }
}

//Optimal Solution 
//TC- O(logn)
class Solution {
    public int findPeakElement(int[] nums) {
        int n = nums.length;
        if(n == 1) {
            return 0;
        }
        if(nums[0] > nums[1]) {
            return 0;
        }
        if(nums[n-1] > nums[n-2]){
            return n-1;
        }
        int low = 1;
        int high = n - 2;
        while(low <= high) {
            int mid = (low + high) / 2;
            if(nums[mid] > nums[mid-1] && nums[mid] > nums[mid+1]){
                return mid;
            }else if(nums[mid] > nums[mid-1]){
                low = mid + 1; // Right half
            } else if(nums[mid] > nums [mid+1]){
                high = mid - 1; //Left half
            } else {
                high = mid - 1; //For Two peaks 
            }
        }
        return -1;
    }
}
