//Brute Force
//Leetcode Link: https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/
//TC - O(n)
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int n = nums.length;
        int first = -1;
        int last = -1;
        for(int i = 0; i < n; i++) {
            if(nums[i] == target) {
                if(first == -1) {
                    first = i;
                    last = i;
                } else {
                    last = i;
                }
            }
        }
        return new int[]{first,last};
    }
}

//Optimised Solution using Lower Bound and Upper Bound 
//TC - 2 * O(logn)
//SC - O(1)
class Solution {
    private int lowerBound(int[] nums, int target) {
        int n = nums.length;
        int low = 0;
        int high = n - 1;
        int ans = n;
        while(low <= high) {
            int mid = (low + high) / 2;
            if(nums[mid] >= target) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }
    private int upperBound(int[] nums, int target) {
        int n = nums.length;
        int low = 0;
        int high = n - 1;
        int ans = n;
        while(low <= high) {
            int mid = (low + high) / 2;
            if(nums[mid] > target) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }
    public int[] searchRange(int[] nums, int target) {
        int n = nums.length;
        int lb = lowerBound(nums,target);
        if(lb == n || nums[lb] != target) {
            return new int[]{-1,-1};
        } else {
            return new int[]{lb,upperBound(nums,target) - 1};
        }
    }
}

//Optimised solution using only Binary Search
//TC- O(logn)

class Solution {
    private int firstOccurence(int[] nums, int target) {
        int n = nums.length;
        int low = 0;
        int high = n - 1;
        int first = -1;
        while(low <= high) {
            int mid = (low + high) / 2;
            if(nums[mid] == target) {
                first = mid;
                high = mid - 1;
            } else if(nums[mid] < target) {
                low = mid + 1;
            } else {  //nums[mid] > target
                high = mid - 1;
            }
        }
        return first;
    }

    private int lastOccurence(int[] nums, int target) {
        int n = nums.length;
        int low = 0;
        int high = n - 1;
        int last = -1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if(nums[mid] == target) {
                last = mid; 
                low = mid + 1;
            } else if (nums[mid] > target) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return last;
    }
    public int[] searchRange(int[] nums, int target) {
        int first = firstOccurence(nums,target);
        if(first == -1) {
            return new int[]{-1,-1};
        }
        int last = lastOccurence(nums,target);
        return new int[]{first,last};
    }
}
