//Brute Force 
//TC - O(n)
class Solution {
    public boolean possible(int[] bloomDay, int day, int m, int k) {
        int count = 0;
        int noOfBouquets = 0;
        int n = bloomDay.length;
        for(int i = 0; i < n; i++) {
            if(bloomDay[i] <= day) {
                count++;
            } else {
                noOfBouquets += (count / k);
                count = 0;
            }
        }
        noOfBouquets += (count / k);
        return noOfBouquets >= m;
    }
    public int minDays(int[] bloomDay, int m, int k) {
        int n = bloomDay.length;
        long totalFlowersRequired = (long) m * k;
        if(totalFlowersRequired > n) {
            return -1;
        }
        int maxi = Integer.MIN_VALUE;
        int mini = Integer.MAX_VALUE;
        for(int i = 0; i < n; i++) {
            maxi = Math.max(maxi, bloomDay[i]);
            mini = Math.min(mini, bloomDay[i]);
        }

        for(int i = mini; i <= maxi; i++) {
            if(possible(bloomDay,i,m,k)) {
                return i;
            }
        }
        return -1;
    }
}

//Optimised Solution
//TC- O(logn)
class Solution {
    public boolean possible(int[] bloomDay, int day, int m, int k) {
        int count = 0;
        int noOfBouquets = 0;
        int n = bloomDay.length;
        for(int i = 0; i < n; i++) {
            if(bloomDay[i] <= day) {
                count++;
            } else {
                noOfBouquets += (count / k);
                count = 0;
            }
        }
        noOfBouquets += (count / k);
        return noOfBouquets >= m;
    }
    public int minDays(int[] bloomDay, int m, int k) {
        int n = bloomDay.length;
        long totalFlowersRequired = (long) m * k;
        if(totalFlowersRequired > n) {
            return -1;
        }
        int maxi = Integer.MIN_VALUE;
        int mini = Integer.MAX_VALUE;
        for(int i = 0; i < n; i++) {
            maxi = Math.max(maxi, bloomDay[i]);
            mini = Math.min(mini, bloomDay[i]);
        }
        int low = mini;
        int high = maxi;
        while(low <= high) {
            int mid = (low + high) / 2;
            if(possible(bloomDay,mid,m,k)) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return low;
    }
}
