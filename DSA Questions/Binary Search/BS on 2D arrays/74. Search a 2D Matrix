//Brute Force Solution
//TC - O(n*m)
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int n = matrix.length; //rows
        int m = matrix[0].length; //Column
        for(int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (matrix[i][j] == target) {
                    return true;
                }
            }
        }
        return false;
    }
}

//Better Solution
//Binary Search
//TC - O(n) + O(logm) 
class Solution {
    public boolean binarySearch(int[] matrix,int target) {
        int low = 0;
        int high = matrix.length;
        while(low <= high) {
            int mid = (low + high) / 2;
            if(matrix[mid] == target) return true;
            else if (matrix[mid] > target) high = mid - 1;
            else low = mid + 1;
        }
        return false;
    }
    public boolean searchMatrix(int[][] matrix, int target) {
        int n = matrix.length; //rows
        int m = matrix[0].length; //Column
        for(int i = 0; i < n; i++) {
            if(matrix[i][0] <= target && matrix[i][m-1] >= target) {
                return binarySearch(matrix[i],target);
            }
        }
        return false;
    }
}
