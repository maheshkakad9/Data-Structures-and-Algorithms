//Brute Force Solution
//TC - O(m * n)
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length;
        int n = matrix[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] == target) {
                    return true;
                }
            }
        }
        return false;
    }
}

//Better Solution
//Using Binary Search
//TC - O(m) + O(logn)
class Solution {
    public boolean binarySearch(int[] matrix, int target) {
        int n = matrix.length;
        int low = 0;
        int high = n - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if(matrix[mid] == target) return true;
            else if(matrix[mid] > target) high = mid - 1;
            else low = mid + 1;
        }
        return false;
    }
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length;
        int n = matrix[0].length;
        for (int i = 0; i < m; i++) {
            boolean ans = binarySearch(matrix[i],target);
            if (ans == true) {
                return true;
            }
        }
        return false;
    }
}

//Optimal Solution Not the perfect one does not passed all the test cases on leetcode
//TC- O(m + n)
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length;
        int n = matrix[0].length;
        int row = 0;
        int col = n - 1;
        while(row < n && col >= 0) {
            if (matrix[row][col] == target) return true;
            else if (matrix[row][col] > target) col--;
            else row++;
        }
        return false;
    }
}
