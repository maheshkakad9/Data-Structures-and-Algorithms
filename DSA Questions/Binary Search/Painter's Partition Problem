//Brute Force Solution
//TC - O(maxi+sum-1) * O(n)
public class Solution 
{
    public static int calculatePainter(ArrayList<Integer> boards, int time) {
        int painter = 1;
        int units = 0;
        for(int i=0; i < boards.size(); i++) {
            if(units + boards.get(i) <= time) {
                units += boards.get(i);
            } else {
                painter++;
                units = boards.get(i);
            }
        }
        return painter;
    }
    public static int findLargestMinDistance(ArrayList<Integer> boards, int k)
    {
        int n = boards.size();
        int maxi = Integer.MIN_VALUE;
        int sum = 0;
        for(int i = 0; i < n; i++) {
            sum += boards.get(i);
            maxi = Math.max(maxi,boards.get(i));
        }

        for(int time = maxi; time <= sum; time++) {
            if(calculatePainter(boards,time) == k) {
                return time;
            }
        }
        return -1;
    }
} 


//Optimised Solution
//TC- O(logn(maxi+sum-1) * O(n)
 import java.util.ArrayList;

public class Solution 
{
    public static int calculatePainter(ArrayList<Integer> boards, int time) {
        int painter = 1;
        int units = 0;
        for(int i=0; i < boards.size(); i++) {
            if(units + boards.get(i) <= time) {
                units += boards.get(i);
            } else {
                painter++;
                units = boards.get(i);
            }
        }
        return painter;
    }
    public static int findLargestMinDistance(ArrayList<Integer> boards, int k)
    {
        int n = boards.size();
        int maxi = Integer.MIN_VALUE;
        int sum = 0;
        for(int i = 0; i < n; i++) {
            sum += boards.get(i);
            maxi = Math.max(maxi,boards.get(i));
        }

        int low = maxi;
        int high = sum;
        int ans = 0;
        while(low <= high) {
            int mid = (low + high) / 2;
            int painterCount = calculatePainter(boards,mid);
            if(painterCount <= k) {
                ans = mid;
                high = mid - 1;
            } else { 
                low = mid + 1;
            }
        }
        return ans;
    }
}
