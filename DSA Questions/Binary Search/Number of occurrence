//Number of occurrence
//GeekforGeeks Link: https://www.geeksforgeeks.org/problems/number-of-occurrence2259/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=number-of-occurrence
//Brute Force Solution
//TC - O(n)
class Solution {
    int countFreq(int[] arr, int target) {
        int count = 0;
        for(int i = 0; i < arr.length; i++) {
            if(arr[i] == target) {
                count++;
            }
        }
        return count;
    }
}

//Optimal Solution using Binary Search and first and last occurence 
//TC- 2 * O(logn) 
class Solution {
    private int firstOccurence(int[] arr, int target) {
        int n = arr.length;
        int low = 0;
        int high = n - 1;
        int first = -1;
        while(low <= high) {
            int mid = (low + high) / 2;
            if(arr[mid] == target) {
                first = mid;
                high = mid - 1;
            } else if (arr[mid] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return first;
    }
    private int lastOccurence(int[] arr, int target) {
        int n = arr.length;
        int low = 0;
        int high = n - 1;
        int last = -1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if(arr[mid] == target) {
                last = mid;
                low = mid + 1;
            } else if( arr[mid] > target) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return last;
    }
    int countFreq(int[] arr, int target) {
        int first = firstOccurence(arr,target);
        if(first == -1) {
            return 0;
        }
        int last = lastOccurence(arr,target);
        return last - first + 1;
    }
}

