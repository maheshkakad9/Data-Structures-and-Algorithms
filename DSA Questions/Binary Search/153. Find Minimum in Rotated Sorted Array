//Brute Force Approached 
//TC - O(n)
class Solution {
    public int findMin(int[] nums) {
        int min = Integer.MAX_VALUE;
        for(int i = 0; i < nums.length; i++) {
            if(nums[i] < min) {
                min = nums[i];
            }
        }
        return min;
    }
}

//Optimal Approached using binary search 
class Solution {
    public int findMin(int[] nums) {
        int n = nums.length;
        if(n == 1){
            return nums[0];
        }
        //For the first element
        if(nums[0] < nums[1] && nums[0] < nums[n-1]) {
            return nums[0];
        }
        //For the last element
        if(nums[n-1] < nums[n-2] && nums[n-1] < nums[0]) {
            return nums[n-1];
        }
        int low = 1;
        int high = n - 2;
        while(low <= high) {
            int mid = (low+high)/ 2;
            if(nums[mid] < nums[mid-1]) {
                return nums[mid];
            } else if(nums[mid] > nums[high]){
                low = mid + 1;
            } else if(nums[mid] < nums[high]){
                high = mid - 1;
            }
        }
        return -1;
    }
}
