//Brute Force
//TC - O(maxi+sum-1) * O(n)
//Time Limit exceed
import java.util.ArrayList;
public class Solution {
    public static int checkAllocation(ArrayList<Integer> arr,int pages) {
        int n = arr.size();
        int student = 1;
        int pagesStudent = 0;
        for(int i = 0; i < n; i++) {
            if(pagesStudent + arr.get(i) <= pages) {
                pagesStudent += arr.get(i);
            } else {
                student++;
                pagesStudent = arr.get(i);
            }
        }
        return student;
    }
    public static int findPages(ArrayList<Integer> arr, int n, int m) {
        if(m > n) return -1;
        int maxi = Integer.MIN_VALUE;
        int sum = 0;
        for(int i = 0; i < n; i++) {
            sum += arr.get(i);
            maxi = Math.max(maxi,arr.get(i));
        }
        for(int pages = maxi; pages <= sum; pages++) {
            if(checkAllocation(arr,pages) == m) {
                return pages;
            }
        }
        return -1;
    }
}

//Optimised Solution
//Using Binary Search
TC- O(logn(maxi-sum+1))*O(n)
import java.util.ArrayList;
public class Solution {
    public static int checkAllocation(ArrayList<Integer> arr,int pages) {
        int n = arr.size();
        int student = 1;
        int pagesStudent = 0;
        for(int i = 0; i < n; i++) {
            if(pagesStudent + arr.get(i) <= pages) {
                pagesStudent += arr.get(i);
            } else {
                student++;
                pagesStudent = arr.get(i);
            }
        }
        return student;
    }
    public static int findPages(ArrayList<Integer> arr, int n, int m) {
        if(m > n) return -1;
        int maxi = Integer.MIN_VALUE;
        int sum = 0;
        for(int i = 0; i < n; i++) {
            sum += arr.get(i);
            maxi = Math.max(maxi,arr.get(i));
        }
        int low = maxi;
        int high = sum;
        while(low <= high) {
            int mid = (low + high) / 2;
            int noOfStudents = checkAllocation(arr,mid);
            if(noOfStudents > m) {
                low = mid + 1;
            } else {
                high = mid -1;
            }
        }
        return low;
    }
}

//Similar Problem 
410. Split Array Largest Sum Leetcode
