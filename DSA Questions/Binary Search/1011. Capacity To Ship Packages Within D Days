//Brute Force approached
//TC - O(n)
class Solution {
    public int findDays(int[] weights, int cap) {
        int days = 1;
        int load = 0;
        int n = weights.length;
        for(int i = 0; i < n; i++) {
            if (load + weights[i] > cap) {
                days += 1;
                load = weights[i];
            } else {
                load += weights[i];
            }
        }
        return days;
    }
    public int shipWithinDays(int[] weights, int days) {
        int maxi = Integer.MIN_VALUE, sum = 0;
        for(int i = 0; i < weights.length; i++) {
            sum += weights[i];
            maxi = Math.max(maxi, weights[i]);
        }

        for(int i = maxi; i <= sum; i++) {
            if (findDays(weights, i) <= days) {
                return i;
            }
        }

        return -1;
    }
}

//Optimised Solution using Binary Search
//TC - O(logn)
class Solution {
    public int findDays(int[] weights, int cap) {
        int days = 1;
        int load = 0;
        int n = weights.length;
        for(int i = 0; i < n; i++) {
            if (load + weights[i] > cap) {
                days += 1;
                load = weights[i];
            } else {
                load += weights[i];
            }
        }
        return days;
    }
    public int shipWithinDays(int[] weights, int days) {
        int maxi = Integer.MIN_VALUE, sum = 0;
        for(int i = 0; i < weights.length; i++) {
            sum += weights[i];
            maxi = Math.max(maxi, weights[i]);
        }
        int low = maxi;
        int high = sum;
        int ans = 0;
        while(low <= high) {
            int mid = (low + high) / 2;
            int numberOfDays = findDays(weights,mid);
            if(numberOfDays <= days) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }
}
