//Brute Force
//TC- O(maxi+sum-1) * O(n)
class Solution {
    public int minimumSubArrayCount(int[] nums, int minimumSum) {
        int n = nums.length;
        int subArrayCount = 1;
        int initialSum = 0;
        for(int i = 0; i < n; i++) {
            if(initialSum + nums[i] <= minimumSum) {
                initialSum += nums[i];
            } else {
                subArrayCount++;
                initialSum = nums[i];
            }
        }
        return subArrayCount;
    }

    public int splitArray(int[] nums, int k) {
        int n = nums.length;
        int sum = 0;
        int maxi = Integer.MIN_VALUE;
        for(int i = 0; i < n; i++) {
            sum += nums[i];
            maxi = Math.max(maxi,nums[i]);
        }

        for(int minimumSum = maxi; minimumSum <= sum; minimumSum++) {
            if(minimumSubArrayCount(nums,minimumSum) == k) {
                return minimumSum;
            }
        }
        return -1;
    }
}

//Optimised Solution using Binary Search
//TC - O(logn(maxi+sum-1)) * O(n)

class Solution {
    public int minimumSubArrayCount(int[] nums, int minimumSum) {
        int n = nums.length;
        int subArrayCount = 1;
        int initialSum = 0;
        for(int i = 0; i < n; i++) {
            if(initialSum + nums[i] <= minimumSum) {
                initialSum += nums[i];
            } else {
                subArrayCount++;
                initialSum = nums[i];
            }
        }
        return subArrayCount;
    }

    public int splitArray(int[] nums, int k) {
        int n = nums.length;
        int sum = 0;
        int maxi = Integer.MIN_VALUE;
        for(int i = 0; i < n; i++) {
            sum += nums[i];
            maxi = Math.max(maxi,nums[i]);
        }

        int low = maxi;
        int high = sum;
        int ans = 0;
        while(low <= high) {
            int mid = (low + high) / 2;
            int subCount = (minimumSubArrayCount(nums,mid));
            if(subCount <= k) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }
}
