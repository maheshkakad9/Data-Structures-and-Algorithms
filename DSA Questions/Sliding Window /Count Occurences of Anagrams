//Solution 1
//{ Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.util.*;

class GFG {
    // Driver code
    public static void main(String[] args) throws Exception {
        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine().trim());
        while (t-- > 0) {
            String txt = br.readLine().trim();
            String pat = br.readLine().trim();

            int ans = new Solution().search(pat, txt);

            System.out.println(ans);
        
System.out.println("~");
}
    }
}
// } Driver Code Ends


// User function Template for Java

class Solution {

    int search(String pat, String txt) {
        HashMap<Character,Integer> map1 = new HashMap<>();
        HashMap<Character,Integer> map2 = new HashMap<>();
        
        int n = txt.length();
        int i = 0;
        int j = 0;
        int k = pat.length();
        int count = 0;
        
        if (k > n) {
            return 0;
        }
        for(char ch : pat.toCharArray()){
            map1.put(ch, map1.getOrDefault(ch,0) + 1);
        }
        while (j < n) {
            map2.put(txt.charAt(j),map2.getOrDefault(txt.charAt(j),0)+1);
            
            if((j - i + 1) < k) {
                j++;
            }else if((j-i+1) == k) {
                if(map1.equals(map2)){
                    count++;
                }
                char startChar = txt.charAt(i);
                if(map2.get(startChar) == 1) {
                    map2.remove(startChar);
                } else {
                    map2.put(startChar, map2.get(startChar) - 1);
                }
                i++;
                j++;
            }
        }
        return count;
    }
}

//Solution 2 
//{ Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.util.*;

class GFG {
    // Driver code
    public static void main(String[] args) throws Exception {
        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine().trim());
        while (t-- > 0) {
            String txt = br.readLine().trim();
            String pat = br.readLine().trim();

            int ans = new Solution().search(pat, txt);

            System.out.println(ans);
        
System.out.println("~");
}
    }
}
// } Driver Code Ends


// User function Template for Java

class Solution {

    int search(String pat, String txt) {
        int n = txt.length();
        int k = pat.length();
        
        int i = 0;
        int j = 0;
        int count = 0;
        int ans = 0;
        HashMap<Character,Integer> hashMap = new HashMap<>();
        
        for(char ch : pat.toCharArray()) {
            hashMap.put(ch,hashMap.getOrDefault(ch,0)+1);
        }
        
        count = hashMap.size();
        
        while(j < n) {
            if(hashMap.containsKey(txt.charAt(j))){
                hashMap.put(txt.charAt(j), hashMap.get(txt.charAt(j)) - 1);
                
                if (hashMap.get(txt.charAt(j)) == 0) {
                    count -- ;
                }
            }
            
            if((j-i+1) < k) {
                j++;
            } else if ((j-i+1) == k) {
                if(count == 0) {
                    ans+=1;
                } 
                if (hashMap.containsKey(txt.charAt(i))) {
                    if(hashMap.get(txt.charAt(i)) == 0) {
                        count++;
                    }
                    hashMap.put(txt.charAt(i),hashMap.get(txt.charAt(i)) + 1);
                }
                i++;
                j++;
            } 
        }
        return ans;
    }
}
