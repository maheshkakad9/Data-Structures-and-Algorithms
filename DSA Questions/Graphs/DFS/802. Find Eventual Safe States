//Main Approached 
Using DFS and Cycle Detection
class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        int n = graph.length;
        int[] vis = new int[n];
        int[] pathVis = new int[n];
        int[] check = new int[n];
        List<Integer> result = new ArrayList<>();
        for(int i = 0; i < n; i++) {
            if(vis[i] == 0) {
                dfsCheck(i,graph,vis,pathVis,check);
            }
        }
        for(int i = 0; i < n; i++) {
            if(check[i] == 1) {
                result.add(i);
            }
        }

        return result;
    }

    private boolean dfsCheck(int node, int[][] graph, int[] vis, int[] pathVis, int[] check) {
        vis[node] = 1;
        pathVis[node] = 1;

        for (int neighbor : graph[node]) {
            if(vis[neighbor] == 0) {
                if (dfsCheck(neighbor,graph,vis,pathVis,check)) {
                    return true;
                }
            }
            else if(pathVis[neighbor] == 1) {
                return true;
            }
        }
        pathVis[node] = 0;
        check[node] = 1;
        return false;
    }
}

//Another Approach
//Using Topological Sort 
class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        int n = graph.length;

        List<List<Integer>> reversedGraph = new ArrayList<>();
        int[] indegree = new int[n];
        for (int i = 0; i < n; i++) {
            reversedGraph.add(new ArrayList<>());
        }
        for (int u = 0; u < n; u++) {
            for (int v : graph[u]) {
            reversedGraph.get(v).add(u);  // Reverse edge u -> v to v -> u
            indegree[u]++;
            }
        }

        Queue<Integer> queue = new LinkedList<>();
        List<Integer> safeNodes = new ArrayList<>();
        for(int i = 0; i < n; i++) {
            if(indegree[i] == 0) {
                queue.add(i);
            }
        }

        while(!queue.isEmpty()) {
            int node = queue.peek();
            queue.remove();
            safeNodes.add(node);
            for(int neighbour : reversedGraph.get(node)){
                indegree[neighbour]--;
                if(indegree[neighbour] == 0) {
                    queue.add(neighbour);
                }
            }
        }
        Collections.sort(safeNodes);
        return safeNodes;
    }
}
