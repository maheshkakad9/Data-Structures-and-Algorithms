//DFS
class Solution {
    private void dfs(List<List<Integer>> rooms,int curr ,boolean[] visited) {
        for(int neighbor : rooms.get(curr)) {
            if(!visited[neighbor]) {
                visited[neighbor] = true;
                dfs(rooms,neighbor,visited);
            }
        }
    }
    public boolean canVisitAllRooms(List<List<Integer>> rooms) {
        boolean[] visited = new boolean[rooms.size()];
        int curr = 0;
        visited[curr] = true;
        dfs(rooms,curr,visited);

        for(int i = 0; i<rooms.size(); i++) {
            if (visited[i] == false) {
                return false;
            }
        }
        return true;
    }
}

//BFS
class Solution {
    public boolean canVisitAllRooms(List<List<Integer>> rooms) {
        boolean[] visited = new boolean[rooms.size()];
        Queue<Integer> q = new LinkedList<>();
        q.offer(0);
        visited[0] = true;

        while(!q.isEmpty()) {
            int curr = q.remove();
            for (int neighbor: rooms.get(curr)) {
                if (!visited[neighbor]){
                    visited[neighbor] = true;
                    q.offer(neighbor);
                }
            }
        }

        for(int i = 0; i<rooms.size(); i++) {
            if (visited[i] == false) {
                return false;
            }
        }
        return true;
    }
}
