//Multi Source BFS 
class Solution {
    public int numEnclaves(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        Queue<int[]> queue = new LinkedList<>();
        int[][] visited = new int[m][n];

        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] == 1 && (i == 0 || i == (m-1) || j == 0 || j == (n-1))){
                    queue.offer(new int[]{i,j});
                    visited[i][j] = 1;
                }
            }
        }

        int[] dir = {-1,0,1,0};
        while(!queue.isEmpty()){
            int[] curr = queue.poll();
            int x = curr[0];
            int y = curr[1];
            for(int d = 0; d < 4; d++) {
                int newX = x + dir[d];
                int newY = y + dir[(d + 1) % 4];
                if(isValid(newX, newY, m, n) && grid[newX][newY] == 1 && visited[newX][newY] == 0) {
                    queue.offer(new int[]{newX,newY});
                    visited[newX][newY] = 1;
                }
            }
        }
        int count = 0;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j] == 1 && visited[i][j] != 1) {
                    count += 1;
                } 
            }
        }
        return count;
    }
    private boolean isValid(int x, int y, int m, int n) {
        return x >= 0 && x < m && y >= 0 && y < n;
    }
}
