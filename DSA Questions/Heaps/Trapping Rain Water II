//407. Trapping Rain Water II (Leetcode)
//Hard

class Solution {
    public int trapRainWater(int[][] heightMap) {
        int m = heightMap.length;
        int n = heightMap[0].length;

        PriorityQueue<int[]> boundaryCells = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));

        boolean[][] visited = new boolean[m][n];

        for(int row = 0; row < m; row++) {
            boundaryCells.offer(new int[]{heightMap[row][0],row,0});
            visited[row][0] = true;

            boundaryCells.offer(new int[]{heightMap[row][n-1],row,n-1});
            visited[row][n-1] = true;
        }

        for(int col = 0; col < n; col++) {
            boundaryCells.offer(new int[]{heightMap[0][col],0,col});
            visited[0][col] = true;

            boundaryCells.offer(new int[]{heightMap[m-1][col],m-1,col});
            visited[m-1][col] = true;
        }

        int water = 0;

        int[][] directions = {{0,-1},{0,1},{-1,0},{1,0}};

        while(!boundaryCells.isEmpty()){
            int[] cell = boundaryCells.poll();
            int height = cell[0];
            int i = cell[1];
            int j = cell[2];

            for(int[] dir : directions) {
                int i_ = i + dir[0];
                int j_ = j + dir[1];

                if(i_ >= 0 && i_ < m && j_ >= 0 && j_ < n && !visited[i_][j_]) {
                    water += Math.max(height - heightMap[i_][j_],0);
                    boundaryCells.offer(new int[]{Math.max(height,heightMap[i_][j_]),i_,j_});
                    visited[i_][j_] = true;
                }
            }
        }
        return water;
    }
}


//Another Same approach code in java 

import java.util.*;

class Solution {
    private static boolean isValid(int x, int y, int m, int n) {
        return x >= 0 && x < m && y >= 0 && y < n;
    }

    public int trapRainWater(int[][] heightMap) {
        int m = heightMap.length;
        int n = heightMap[0].length;
        if (m < 3 || n < 3) // Need minimum 3x3 matrix to hold water
            return 0;

        PriorityQueue<int[]> minHeap = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        boolean[][] visited = new boolean[m][n];

        // Step-1: Push all boundary elements as START points
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0 || i == m - 1 || j == 0 || j == n - 1) {
                    minHeap.offer(new int[] { heightMap[i][j], i, j });
                    visited[i][j] = true;
                }
            }
        }

        // Step-2: Apply BFS similar to level-order traversal
        int level = 0;
        int trappedWater = 0;
        int[] dir = { -1, 0, 1, 0, -1 };

        while (!minHeap.isEmpty()) {
            int[] curr = minHeap.poll();
            int height = curr[0];
            int x = curr[1];
            int y = curr[2];
            level = Math.max(level, height);

            // 4-directional traversal
            for (int i = 0; i < 4; i++) {
                int newX = x + dir[i];
                int newY = y + dir[i + 1];
                if (isValid(newX, newY, m, n) && !visited[newX][newY]) {
                    visited[newX][newY] = true;
                    minHeap.offer(new int[] { heightMap[newX][newY], newX, newY });
                    if (heightMap[newX][newY] < level) {
                        trappedWater += level - heightMap[newX][newY];
                    }
                }
            }
        }
        return trappedWater;
    }
}
