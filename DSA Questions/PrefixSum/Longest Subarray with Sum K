//Brute Force 
static int longestSubarray(int[] arr, int k) {
        int res = 0;
        for (int i = 0; i < arr.length; i++) {
            int sum = 0;
            for (int j = i; j < arr.length; j++) {
                sum += arr[j];
                if (sum == k) {
                    int subLen = j - i + 1;
                    res = Math.max(res, subLen);
                }
            }
        }
        return res;
    }

//Prefix Sum and HashMap Code 
// User function Template for Java

class Solution {
    public int longestSubarray(int[] arr, int k) {
        Map<Integer,Integer> mp = new HashMap<>();
        int res = 0;
        int prefSum = 0;
        
        for (int i = 0; i < arr.length; i++) {
            prefSum += arr[i];
            
            if (prefSum == k) {
                res = i + 1;
            }
            else if (mp.containsKey(prefSum - k)) {
                res = Math.max(res,i - mp.get(prefSum - k));
            }
            
            if (!mp.containsKey(prefSum)) {
                mp.put(prefSum,i);
            }
        }
        return res;
    }
}
