//Brute Force approached
TC - O(m*n) + O(m+n)
class Solution {
    public int countServers(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int count = 0;

        for(int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if(grid[i][j] == 1) {
                    if(canCommunicate(grid,i,j)){
                        count++;
                    }
                }
            }
        }
        return count;
    }
    private boolean canCommunicate(int[][] grid, int x, int y) {
        int m = grid.length;
        int n = grid[0].length;

        //Check the row
        for(int j = 0; j < n; j++) {
            if(j != y && grid[x][j] == 1) {
                return true;
            }
        }

        //Check the column
        for(int i = 0; i < m; i++) {
            if(i != x && grid[i][y] == 1) {
                return true;
            }
        }
        return false;
    }
}

//Another approached 
TC - O(m*n) + O(m*n) = O(m*n)
SC = O(m+n)
class Solution {
    public int countServers(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[] rowCount = new int[m];
        int[] colCount = new int[n];
        int totalServers = 0;

        //Calculating the total servers and rowCount and ColCount
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] == 1) {
                    rowCount[i]++;
                    colCount[j]++;
                    totalServers++;
                }
            }
        }

        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] == 1 && rowCount[i] == 1 && colCount[j] == 1) {
                    totalServers--;
                }
            }
        }
        return totalServers;
    }
}
