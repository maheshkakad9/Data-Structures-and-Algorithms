//Brute Force
//TC- O(n*2)
//Gives TLE
class Solution {
    public int maxProfit(int[] prices) {
        int maxProfit = 0;
        int n = prices.length;
        for(int i=0; i<n; i++){
            for(int j=i+1; j<n; j++) {
                if(prices[j] > prices[i]) {
                    maxProfit = Math.max(prices[j]-prices[i],maxProfit);
                }
            }
        }
        return maxProfit;
    }
}

//Optimised Solution
//TC - O(n)
//SC- O(1)
class Solution {
    public int maxProfit(int[] prices) {
        int maxProfit = 0;
        int minPrice = Integer.MAX_VALUE;

        for(int price: prices) {
            if(price < minPrice) {
                minPrice = price;
            } else {
                maxProfit = Math.max(maxProfit,price-minPrice);
            }
        }

        return maxProfit;
    }
}
